 #!/usr/bin/env python3
"""
===============================================================================
UAE Commercial Property Classifier: Main Orchestrator Script
===============================================================================
This script provides a command-line interface (CLI) to manage the pipeline for:

1. Data Preprocessing:
    - Cleans, tokenizes, and prepares commercial property datasets.

2. Model Training:
    - Trains a property classification model (e.g., Logistic Regression, Random Forest, BERT).
    - Saves the trained model for inference.

3. Inference:
    - Performs property classification on new data.

4. Evaluation:
    - Computes metrics like accuracy, precision, recall, and F1-score.

Example Commands:
    python main.py preprocess --input data/raw/property_data.csv --output data/processed/cleaned_data.csv
    python main.py train --model logistic_regression
    python main.py inference --model_path models/property_classifier.pkl --input_path data/processed/cleaned_data.csv --output_path data/results/classification_results.csv
    python main.py evaluate --model_path models/property_classifier.pkl --metrics accuracy precision recall f1

Repository Structure Assumption:
    UAE-Commercial-Property-Classifier/
    ├── data/
    ├── models/
    ├── notebooks/
    ├── src/
    ├── tests/
    ├── docs/
    ├── animations/
    ├── .gitignore
    ├── LICENSE
    ├── README.md
    ├── requirements.txt
    └── main.py

Author: Your Name
License: Research 247 UAE
===============================================================================
"""

import argparse
import logging
from src.preprocess import preprocess_property_data
from src.train import train_property_classifier
from src.inference import classify_properties
from src.evaluate import evaluate_classifier

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

def main():
    """
    Main CLI for the UAE Commercial Property Classifier pipeline.
    """
    parser = argparse.ArgumentParser(
        prog="UAE-Commercial-Property-Classifier",
        description="CLI for data preprocessing, training, inference, and evaluation."
    )

    subparsers = parser.add_subparsers(
        title="Commands",
        description="Available tasks",
        dest="command",
        required=True
    )

    # Preprocessing subcommand
    preprocess_parser = subparsers.add_parser("preprocess", help="Preprocess property data.")
    preprocess_parser.add_argument("--input", required=True, help="Path to raw input file.")
    preprocess_parser.add_argument("--output", required=True, help="Path to save cleaned output file.")

    # Training subcommand
    train_parser = subparsers.add_parser("train", help="Train a property classification model.")
    train_parser.add_argument("--model", choices=["logistic_regression", "random_forest", "bert"], required=True, help="Model type to train.")

    # Inference subcommand
    inference_parser = subparsers.add_parser("inference", help="Classify new properties.")
    inference_parser.add_argument("--model_path", required=True, help="Path to the trained model file.")
    inference_parser.add_argument("--input_path", required=True, help="Path to the input data file.")
    inference_parser.add_argument("--output_path", required=True, help="Path to save classification results.")

    # Evaluation subcommand
    evaluate_parser = subparsers.add_parser("evaluate", help="Evaluate the trained model.")
    evaluate_parser.add_argument("--model_path", required=True, help="Path to the trained model file.")
    evaluate_parser.add_argument("--metrics", nargs="+", choices=["accuracy", "precision", "recall", "f1"], required=True, help="Metrics to compute.")

    # Parse arguments
    args = parser.parse_args()

    # Dispatch commands
    if args.command == "preprocess":
        preprocess_property_data(args.input, args.output)
    elif args.command == "train":
        train_property_classifier(args.model)
    elif args.command == "inference":
        classify_properties(args.model_path, args.input_path, args.output_path)
    elif args.command == "evaluate":
        evaluate_classifier(args.model_path, args.metrics)
    else:
        logging.error("Unknown command.")
        parser.print_help()


if __name__ == "__main__":
    main()
